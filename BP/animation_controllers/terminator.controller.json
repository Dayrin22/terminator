{
  "format_version": "1.10.0",
  "animation_controllers": {
    "controller.animation.terminator.spawns": {
      "initial_state": "default_state",
      "states": {
        "default_state": {
          "transitions": [{"regeneration": "q.is_alive && q.health < 10"}],
          "on_entry": ["/playsound block.end_portal.spawn @a"] // sound effect
        },
        "regeneration":{
          "transitions": [{"regeneration": "q.is_alive && q.health < 10"}],
          "on_entry": [
            "/effect @s regeneration 4 4 false",
            "/effect @s absorption 120 3 false",
            "/effect @s resistance 300 0 false"
          ]
        }
      }
    },
    "controller.animation.terminator.death": {
      "initial_state": "detect_state",
      "states": {
        "detect_state":{
          "transitions": [{"execute_state": "!q.is_alive"}, {"detect_state": "(1.0)"}],
          "on_entry": [ "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.death/detect_state\"}]}"], // logging
          "on_exit": ["v.tdtimer = math.random_integer(40,100); v.tdtime_stamp = q.time_stamp;"]
        },
        "execute_state": {
          "transitions": [{"cmd1": "(q.time_stamp - v.tdtime_stamp) >= v.tdtimer"}],
          "on_exit": [
            "v.td1timer = 100; v.tdtime_stamp = q.time_stamp;",
            "/say hi"
          ]
        },
        "cmd1": {} // used for further things
      }
    },
    "controller.animation.terminator.destroyblock": {
      "initial_state": "runtimes",
      "states":{
        "runtimes":{"transitions":[{"rng":"(1.0)"}]},
        "rng":{
          "transitions": [{"execute": "v.random_terminator_destroyblock == 54"}, {"runtimes": "(1.0)"}],
          "on_entry": [
            "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.destroyblock/rng\"}]}", // logging
            "v.random_terminator_destroyblock = math.random_integer(0, 54);"
          ]
        },
        "execute":{
          "transitions": [{"runtimes": "(1.0)"}],
          "on_entry": [
            "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.destroyblock/execute\"}]}", // logging
            "/fill ~ ~1 ~ ~ ~2 ~ air 0 destroy"
          ]
        }
      }
    },
    "controller.animation.terminator.sitting": {
      "initial_state": "default",
      "states": {
        "default": {
          "on_entry": [
            "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.sitting/default\"}]}" // logging
          ],
          "transitions": [
            {
              "cooldown": "(q.is_sitting > 0.0 || q.is_riding > 0.0 || q.sit_amount > 0.0) && q.has_target ? (q.target -> q.has_any_family('player')) : 0.0"
            }
          ]
        },
        "cooldown": {
          "on_entry":[
            "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.sitting/cooldown/on_entry\"}]}", // logging
            "v.random = math.random_integer(60,100); v.tstime_stamp = q.time_stamp;"
          ],
          "transitions": [{"default": "(q.time_stamp - v.tstime_stamp) >= v.random"}],
          "on_exit": [
            "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.sitting/cooldown/on_exit\"}]}", // logging
            "/kill @e[type=boat,r=1,c=1]",
            "/kill @e[type=minecart,r=1,c=1]"
          ] // force the mob to leave the boat
        }
      }
    },
    "controller.animation.terminator.bridging": {
      "initial_state": "default_state",
      "states": {
        "default_state": {
          "transitions": [
            { "bridge.east": "q.target_y_rotation <= 45 && q.target_y_rotation > -45" },
            { "bridge.south": "q.target_y_rotation <= 135 && q.target_y_rotation > 45" },
            { "bridge.west": "q.target_y_rotation <= 225 && q.target_y_rotation > 135"},
            { "bridge.north": "q.target_y_rotation <= 315 && q.target_y_rotation > 225"}
          ]
        },
        "bridge.east": {
          "transitions": [{"default_state": "(1.0)"}],
          "on_entry": [
            "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.bridging/bridge.east\"}]}", // logging
            "/execute @s ~ ~ ~ fill ~ ~-1 ~1 ~ ~-1 ~1 cobblestone 0 replace air"
          ] 
        },
        "bridge.south": {
          "transitions": [{"default_state": "(1.0)"}],
          "on_entry": [
            "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.bridging/bridge.south\"}]}", // logging
            "/execute @s ~ ~ ~ fill ~-1 ~-1 ~ ~-1 ~-1 ~ cobblestone 0 replace air"
          ] 
        },
        "bridge.west": {
          "transitions": [{"default_state": "(1.0)"}],
          "on_entry": [
            "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.bridging/bridge.west\"}]}", // logging
            "/execute @s ~ ~ ~ fill ~ ~-1 ~-1 ~ ~-1 ~-1 cobblestone 0 replace air"
          ]
        },
        "bridge.north": {
          "transitions": [{"default_state": "(1.0)"}],
          "on_entry": [
            "/tellraw @a[tag=dev] {\"rawtext\":[{\"text\": \"[\"},{\"selector\": \"@s\"}, {\"text\": \"] controller.animation.terminator.bridging/bridge.north\"}]}", // logging
            "/execute @s ~ ~ ~ fill ~1 ~-1 ~ ~1 ~-1 ~ cobblestone 0 replace air"
          ]
        }
      }
    }
  }
}